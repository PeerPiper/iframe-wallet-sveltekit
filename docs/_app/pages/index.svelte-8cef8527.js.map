{"version":3,"file":"index.svelte-8cef8527.js","sources":["../../../../../src/lib/stores.js","../../../../../src/lib/Connector.svelte","../../../../../src/lib/utils.ts","../../../../../src/lib/Clipboard.svelte","../../../../../src/lib/ListKeys.svelte","../../../../../src/lib/GetKeys.svelte","../../../../../src/lib/AutoSizer.svelte","../../../../../src/lib/Opened.svelte","../../../../../src/lib/components/confirm/DefaultConfirmation.svelte","../../../../../src/lib/components/confirm/Connect.svelte","../../../../../node_modules/@stablelib/base64/lib/base64.js","../../../../../src/lib/components/confirm/arweave/deepHash.ts","../../../../../node_modules/bignumber.js/bignumber.mjs","../../../../../src/lib/components/confirm/arweave/utils.ts","../../../../../src/lib/components/confirm/ArweaveSign.svelte","../../../../../src/lib/components/confirm/Sign.svelte","../../../../../src/lib/components/confirm/Decrypt.svelte","../../../../../src/lib/components/confirm/index.ts","../../../../../src/lib/Confirmer.svelte","../../../../../src/routes/index.svelte"],"sourcesContent":["import { derived, writable } from 'svelte/store';\r\n\r\nexport const keypairs = writable(new Map());\r\n\r\nexport const storedValue = writable();\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS } from '@peerpiper/iframe-wallet-engine';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\texport let mounted;\r\n\r\n\t// function names assigned only after component loads in DOM\r\n\tlet openTwinWindow;\r\n\tlet handleMessage;\r\n\r\n\t// state variables\r\n\tlet connecting;\r\n\tlet openedWindow;\r\n\r\n\tlet topUrl;\r\n\r\n\tonMount(async () => {\r\n\t\ttopUrl = self === top ? document.URL : document.referrer;\r\n\r\n\t\t// If 1) is NOT top AND 2) No keys are stored a new twin window must be opened so that the user can generate keys, in the top window\r\n\t\topenTwinWindow = () => {\r\n\t\t\tconnecting = true;\r\n\t\t\topenedWindow = window.open(window.location.href, '_blank'); // open the same domain to provide maximum security.\r\n\t\t};\r\n\r\n\t\thandleMessage = async (event) => {\r\n\t\t\tif (event.data == CONSTANTS.OPENED_SIGNAL) {\r\n\t\t\t\tevent.ports[0].postMessage(topUrl);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (event.data.key == CONSTANTS.WINDOW_SYNC) {\r\n\t\t\t\tconsole.log('Sync received ');\r\n\t\t\t\t$storedValue = event.data.storedValue;\r\n\r\n\t\t\t\t// save mnemonic to localstorage\r\n\t\t\t\t// run: mnemonic to proxcryptor\r\n\t\t\t\t// send confirmation back to opened window (so it can close)\r\n\r\n\t\t\t\t// await importKeys(JSON.parse(event.data.data)); // import the keys here in this browser context\r\n\t\t\t\tevent.ports[0].postMessage('Imported'); // send ack back to Opened window so it can remove \"pending\" label for this window\r\n\t\t\t\tconnecting = false;\r\n\t\t\t\topenedWindow.close();\r\n\t\t\t\twindow.focus(); // fails tho\r\n\t\t\t}\r\n\r\n\t\t\t// Main page closed, state is no longer trying to connect\r\n\t\t\tif (event.data == CONSTANTS.CLOSING) {\r\n\t\t\t\tconnecting = false;\r\n\t\t\t}\r\n\t\t};\r\n\t});\r\n</script>\r\n\r\n<svelte:window on:message={handleMessage} />\r\n\r\n<div class=\"connector\">\r\n\t{#if mounted}\r\n\t\t{#if $storedValue}\r\n\t\t\t<slot />\r\n\t\t{:else}\r\n\t\t\t<div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tdisabled={connecting}\r\n\t\t\t\t\tclass={connecting ? 'yellow' : 'ready'}\r\n\t\t\t\t\ton:click|preventDefault={openTwinWindow}\r\n\t\t\t\t\t>{connecting ? 'Authorize from Main Wallet Window' : 'Connect'}</button\r\n\t\t\t\t>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.connector {\r\n\t\tdisplay: flex;\r\n\t\tmin-height: 100%;\r\n\t\t/* margin: 1em; */\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tflex-direction: column;\r\n\t\tflex-wrap: nowrap;\r\n\t}\r\n</style>\r\n","export const shorten = (key: string, start = 6, end = 6) => {\r\n\tif (key.length < start + end + 3) return key;\r\n\treturn key.slice(0, start) + '...' + key.slice(key.length - end, key.length);\r\n};\r\n\r\nexport const shortenURL = (key: string) => {\r\n\tconst tail = 30;\r\n\tconst start = 'https://'.length; // key.slice(start, Math.min(start, 8)) +\r\n\tconst end = Math.max(key.length - tail, 0);\r\n\tconst maybeEllips = key.length > tail ? '..' : '';\r\n\treturn maybeEllips + key.slice(end, key.length);\r\n};\r\n","<script>\r\n\timport { fade } from 'svelte/transition';\r\n\r\n\texport let value = null;\r\n\r\n\tlet clip;\r\n\tlet copied;\r\n\tlet duration = 2000;\r\n\r\n\tasync function copy() {\r\n\t\tvar promise = navigator.clipboard.writeText(clip.innerHTML);\r\n\t\tawait promise;\r\n\t\tvalue = promise;\r\n\t\tcopied = true;\r\n\t\tsetTimeout(() => (copied = false), 1);\r\n\t}\r\n</script>\r\n\r\n<!-- Clipboard  -->\r\n<div class=\"Clipboard-Container\" on:click={copy}>\r\n\t<div class=\"Clipboard\" bind:this={clip}>\r\n\t\t<slot {copy} />\r\n\t</div>\r\n\t{#if copied}\r\n\t\t<div out:fade={{ duration }}>✔️Copied</div>\r\n\t{:else}\r\n\t\t<div in:fade={{ duration: 0, delay: duration }}>\r\n\t\t\t<svg\r\n\t\t\t\ton:click={copy}\r\n\t\t\t\tclass=\"octicon octicon-clippy\"\r\n\t\t\t\tviewBox=\"0 0 14 16\"\r\n\t\t\t\tversion=\"1.1\"\r\n\t\t\t\twidth=\"14\"\r\n\t\t\t\theight=\"16\"\r\n\t\t\t\taria-hidden=\"true\"\r\n\t\t\t>\r\n\t\t\t\t<title>Copy to clipboard</title>\r\n\t\t\t\t<path\r\n\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\td=\"M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z\"\r\n\t\t\t\t/>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\ttextarea {\r\n\t\tposition: fixed;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 2em;\r\n\t\theight: 2em;\r\n\t\tpadding: 0;\r\n\t\tborder: none;\r\n\t\toutline: none;\r\n\t\tbox-shadow: none;\r\n\t\tbackground: transparent;\r\n\t}\r\n\t.Clipboard {\r\n\t\tmargin: 0 0.5em;\r\n\t}\r\n\t.Clipboard-Container {\r\n\t\tdisplay: flex;\r\n\t}\r\n\t.Clipboard-Container,\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t}\r\n\tsvg {\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: transparent;\r\n\t\tstroke: var(--font-color);\r\n\t\tfill: transparent;\r\n\t\twidth: auto;\r\n\t\theight: 1.5em;\r\n\t}\r\n</style>\r\n","<script>\r\n\t// show the user's keys\r\n\t// parse out the JWKs into types: RSA and Ed25519 according to JWK\r\n\timport { shorten } from '$lib/utils';\r\n\timport Clipboard from './Clipboard.svelte';\r\n\r\n\texport let keys;\r\n\r\n\tlet selectedRSA;\r\n\tlet collapsed;\r\n</script>\r\n\r\n{#if keys && keys.length > 0}\r\n\t<div class=\"card\">\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.kty == 'RSA').length}\r\n\t\t\t<div class=\"keylist\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Arweave</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.kty == 'RSA') as rsaJWK}\r\n\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\t\tclass=\"{collapsed && selectedRSA != rsaJWK.kid\r\n\t\t\t\t\t\t\t\t\t? 'hide'\r\n\t\t\t\t\t\t\t\t\t: ''} list-group-item list-group-item-action \"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{rsaJWK.name}\r\n\t\t\t\t\t\t\t\t<Clipboard>\r\n\t\t\t\t\t\t\t\t\t{rsaJWK.publicKeyJWK.kid}</Clipboard\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t\t{#if keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519')}\r\n\t\t\t<div class=\"keylist\">\r\n\t\t\t\t<div class=\"row left\">\r\n\t\t\t\t\t<span>Ed25519</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"row list-group\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{#each keys.filter((k) => k.publicKeyJWK.crv == 'Ed25519') as edJWK}\r\n\t\t\t\t\t\t\t<li class=\" list-group-item list-group-item-action \">\r\n\t\t\t\t\t\t\t\t{shorten(edJWK.name)}\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKeyJWK.x}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKeyBase58}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"full-pubKey\">\r\n\t\t\t\t\t\t\t\t\t<Clipboard>{edJWK.publicKey}</Clipboard>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t<!-- <b>{shorten(key?.publicKeyBase58)}</b><br /> -->\r\n\t\t\t\t\t\t{/each}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t{/if}\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\t--font-color: #0eff02;\r\n\t}\r\n\t.full-pubKey {\r\n\t\t/* display: none; */\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n\t.card {\r\n\t\tmargin: 1em 0em;\r\n\t\tbackground-color: rgb(35, 35, 35);\r\n\t\tpadding: 1.5em;\r\n\t\t-webkit-border-radius: 4px;\r\n\t\t-moz-border-radius: 4px;\r\n\t\tborder-radius: 4px;\r\n\t\tbox-shadow: 2px 2px 6px rgba(14, 255, 2, 0.7);\r\n\t\tcolor: var(--font-color);\r\n\t\twidth: 100%;\r\n\t}\r\n\t.keylist {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: row;\r\n\t\tflex-wrap: nowrap;\r\n\t\tjustify-content: flex-start;\r\n\t\talign-items: stretch;\r\n\t\talign-content: stretch;\r\n\t\tborder-width: 2px;\r\n\t\tborder-bottom: 1px #d6e7df solid;\r\n\t\tpadding-bottom: 4px;\r\n\t\tmargin-bottom: 4px;\r\n\t}\r\n\t.left {\r\n\t\tflex-shrink: 2;\r\n\t\twidth: 85px;\r\n\t}\r\n\t.row,\r\n\tul {\r\n\t\tmargin: 0em;\r\n\t\tpadding: 0em;\r\n\t}\r\n\t.row:not(.left) {\r\n\t\tflex: 1 1 auto;\r\n\t\toverflow-y: auto;\r\n\t}\r\n\t.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n\tli {\r\n\t\tlist-style: none;\r\n\t\tfont-family: var(--font-mono);\r\n\t}\r\n</style>\r\n","<script>\r\n\t/**\r\n\tKeys can come from:\r\n\t- Loaded from storage (index.svelte, in which case this component is not needed)\r\n\t- Generated from scratch (here)\r\n\t- Load by user (here)\r\n\r\n\tkeys get saved to $storedValue which trigger the ImmortalDB saved\r\n\t*/\r\n\timport { onMount, createEventDispatcher } from 'svelte';\r\n\timport { keypairs } from '$lib/stores';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\timport { internals } from '@peerpiper/iframe-wallet-engine';\r\n\timport ListKeys from './ListKeys.svelte';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\r\n\tlet handleGenerateKeypair;\r\n\r\n\t// state variables\r\n\tlet creating = '';\r\n\tlet keys;\r\n\r\n\tonMount(async () => {\r\n\t\thandleGenerateKeypair = async () => {\r\n\t\t\tcreating = 'Creating keypairs...';\r\n\r\n\t\t\tconst mnemonic = await internals.generateMnemonic();\r\n\t\t\tconst rsajwk = await internals.generateRsaJwk();\r\n\r\n\t\t\t// save to storedValue.\r\n\t\t\t// TODO: offer password protection/encryption?\r\n\t\t\t$storedValue = { ...$storedValue, mnemonic, rsajwk };\r\n\r\n\t\t\tcreating += '<br/>Created mnemonic.';\r\n\t\t\tcreating += `<br/>${mnemonic}`;\r\n\t\t\tcreating += '<br/>Creating master keypair (type ed25519)...';\r\n\t\t};\r\n\t});\r\n\r\n\t$: if ($storedValue && $storedValue.mnemonic) loadKeys(); // load keys once there is a storedValue\r\n\r\n\tasync function loadKeys() {\r\n\t\tawait internals.loadSecrets({ mnemonic: $storedValue.mnemonic, rsajwk: $storedValue.rsajwk });\r\n\r\n\t\tdispatch('loadedKeys', 'details'); // let parent component know\r\n\t\tkeys = getLoadedKeys(); // get all proxcryptor public key info\r\n\t}\r\n\r\n\tfunction getLoadedKeys() {\r\n\t\treturn internals.getLoadedKeys();\r\n\t}\r\n</script>\r\n\r\n{#if $storedValue !== undefined && $storedValue === null}\r\n\t<!-- Show \"Create Keys\" if no keys exist, no matter what page is showing -- toolbar? -->\r\n\t<div class=\"submit attention\">\r\n\t\tNo keypairs detected in this browser. Create or Import them:\r\n\t\t<button class={'green'} on:click={handleGenerateKeypair}>Create New Keypairs</button>\r\n\t\t{@html creating}\r\n\t</div>\r\n{:else}\r\n\t<!-- GetKeys: has storedValue, sending to Connector if in Opened window. Else, allowing user to manage keys.<br /> -->\r\n\t<ListKeys {keys} />\r\n\t<slot />\r\n{/if}\r\n\r\n<style>\r\n\tdiv {\r\n\t\tpadding: 2em;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\r\n\tlet offsetHeight;\r\n\tlet offsetWidth;\r\n\r\n\tlet width;\r\n\r\n\tlet resolveConnector;\r\n\tlet Connection;\r\n\tlet connector;\r\n\t// = new Promise((resolve, reject) => {\r\n\t// \tresolveConnector = resolve;\r\n\t// });\r\n\r\n\tlet walletReady;\r\n\tlet optionalHandlers = {\r\n\t\tsetWidth: (w) => (width = w)\r\n\t};\r\n\r\n\tonMount(async () => {\r\n\t\t({ Connection } = await import('@peerpiper/iframe-wallet-engine'));\r\n\t\tconst connection = new Connection();\r\n\t\tconnector = await connection.init(optionalHandlers);\r\n\r\n\t\twalletReady = async () => {\r\n\t\t\tconnector.walletReady(); // signal to the connector the wallet has loaded\r\n\t\t};\r\n\t});\r\n\r\n\t$: connector && offsetHeight && setHeight(offsetHeight);\r\n\t$: connector && offsetWidth && setWidth(offsetWidth);\r\n\r\n\tfunction show() {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.show(); // works\r\n\t}\r\n\r\n\tfunction hide() {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.hide(); // works\r\n\t}\r\n\r\n\tfunction setHeight(height) {\r\n\t\t// console.log(`Setting height ${height}`);\r\n\t\tconnector.setIframeParentHeight(height); // works\r\n\t}\r\n\r\n\tfunction setWidth(width) {\r\n\t\t// console.log(`Setting width ${width}`);\r\n\t\tconnector.setIframeParentWidth(width); // works\r\n\t}\r\n</script>\r\n\r\n<div class=\"autosizer\" bind:offsetHeight bind:offsetWidth style=\"max-width: {width}px;\">\r\n\t{#if walletReady}\r\n\t\t<slot {walletReady} {show} {hide} />\r\n\t{/if}\r\n</div>\r\n\r\n<style>\r\n\t.autosizer {\r\n\t\tmargin: 0em;\r\n\t\t/* min-height: 100%;\r\n        height: 100%;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t\tflex-direction: column;\r\n\t\tflex-wrap: nowrap; */\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount } from 'svelte';\r\n\timport { CONSTANTS, internals } from '@peerpiper/iframe-wallet-engine';\r\n\timport { storedValue } from '$lib/stores';\r\n\r\n\timport GetKeys from '$lib/GetKeys.svelte';\r\n\timport Manager from '$lib/Manager.svelte';\r\n\r\n\tlet keyDetails;\r\n\tlet mounted;\r\n\r\n\tlet syncKeys;\r\n\tlet pending = true;\r\n\r\n\tonMount(() => {\r\n\t\ttry {\r\n\t\t\tif (window.location.origin === window.opener?.origin) {\r\n\t\t\t\tsendOpenerMsg(CONSTANTS.OPENED_SIGNAL, (event) => {\r\n\t\t\t\t\t// called when the opener replies to our message above\r\n\t\t\t\t\tconsole.log('iframe confirmed loaded by opener');\r\n\t\t\t\t\tpending = false;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.warn(\"Origins didn't match\");\r\n\t\t}\r\n\r\n\t\tfunction sendOpenerMsg(msg, callback = (_) => {}) {\r\n\t\t\tconst channel = new MessageChannel();\r\n\t\t\tchannel.port1.onmessage = callback; // Listen for messages on port1\r\n\t\t\ttry {\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(msg, window.location.origin, [channel.port2]); // the opener will receive this message\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Called when user allows a copy of the keys to be imported to another browser window in same origin\r\n\t\tsyncKeys = () => {\r\n\t\t\tsendOpenerMsg({ key: CONSTANTS.WINDOW_SYNC, storedValue: $storedValue }, (event) => {\r\n\t\t\t\tconsole.log('onComplete', event.data);\r\n\t\t\t\tpending = null;\r\n\t\t\t\tnavigateBack();\r\n\t\t\t}); // uses same origin, keys are secure\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('beforeunload', () => {\r\n\t\t\ttry {\r\n\t\t\t\tconsole.log(window.opener?.origin);\r\n\t\t\t\tconsole.log(window.location.origin);\r\n\t\t\t\tif (window.opener?.origin === window.location.origin)\r\n\t\t\t\t\twindow.opener.postMessage(CONSTANTS.CLOSING);\r\n\t\t\t\tnavigateBack();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"Origins didn't match\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\tfunction navigateBack() {\r\n\t\tif (!window.opener) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t// window.opener.focus(); // fails\r\n\t\t\twindow.history.back(); // works\r\n\t\t\t// window.close();\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n{#if mounted && !pending}\r\n\t<slot {syncKeys} />\r\n{/if}\r\n","<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n</script>\r\n\r\n<slot>\r\n\t<div>\r\n\t\t<div class=\"attention\">\r\n\t\t\t<div>\r\n\t\t\t\t⚠️ Authorize {props.method} from your wallet?\r\n\t\t\t</div>\r\n\t\t\t<div class=\"submit\">\r\n\t\t\t\t<button class=\"green\" on:click={handleConfirmed}>Yes</button>\r\n\t\t\t\t<button class=\"yellow\" on:click={handleDenied}>No</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</slot>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.5em;\r\n\t\tmargin: 0.5em;\r\n\t\twidth: fit-content;\r\n\t}\r\n\r\n\t.submit > button:not(:disabled) {\r\n\t\tbackground-color: #4caf50; /* Green */\r\n\t}\r\n\r\n\t.submit > button:disabled {\r\n\t\tbackground-color: rgb(126, 126, 126) !important; /* Grey */\r\n\t}\r\n\r\n\t.submit > button {\r\n\t\tborder: none;\r\n\t\tcolor: white;\r\n\t\tpadding: 15px 32px;\r\n\t\ttext-align: center;\r\n\t\ttext-decoration: none;\r\n\t\tdisplay: inline-block;\r\n\t\tfont-size: 16px;\r\n\t\tmargin-left: auto;\r\n\t\tborder-radius: 2px;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.1));\r\n\t}\r\n\r\n\tbutton {\r\n\t\tborder: none;\r\n\t\tcolor: white;\r\n\t\tpadding: 15px 32px;\r\n\t\ttext-align: center;\r\n\t\ttext-decoration: none;\r\n\t\tdisplay: inline-block;\r\n\t\tfont-size: 16px;\r\n\t\twidth: fit-content;\r\n\t\tmargin-left: auto;\r\n\t\tmargin-top: 0.5em;\r\n\t\tmargin-bottom: 1em;\r\n\t\tborder-radius: 2px;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.1));\r\n\t}\r\n\r\n\tbutton.yellow {\r\n\t\tbackground-color: rgba(230, 226, 10, 0.82) !important;\r\n\t}\r\n\r\n\tbutton.ready {\r\n\t\tbackground-color: rgb(47, 137, 255, 0.82);\r\n\t}\r\n\r\n\tbutton.green {\r\n\t\tbackground-color: #4caf50;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport DefaultConfirmation from './DefaultConfirmation.svelte';\r\n\r\n\texport let props;\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<DefaultConfirmation bind:this={defConf} {props} let:props={p} on:confirmed>\r\n\t<div class=\"attention\">\r\n\t\t<!-- this is default content, override with slot -->\r\n\t\t<div>\r\n\t\t\t⚠️ Allow {p.params.origin} to see your <b>Public</b> Key?\r\n\t\t</div>\r\n\t\t<div class=\"submit\">\r\n\t\t\t<button on:click|preventDefault={defConf.handleConfirm}>Yes</button>\r\n\t\t</div>\r\n\t</div>\r\n</DefaultConfirmation>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Package base64 implements Base64 encoding and decoding.\n */\n// Invalid character used in decoding to indicate\n// that the character to decode is out of range of\n// alphabet and cannot be decoded.\nvar INVALID_BYTE = 256;\n/**\n * Implements standard Base64 encoding.\n *\n * Operates in constant time.\n */\nvar Coder = /** @class */ (function () {\n    // TODO(dchest): methods to encode chunk-by-chunk.\n    function Coder(_paddingCharacter) {\n        if (_paddingCharacter === void 0) { _paddingCharacter = \"=\"; }\n        this._paddingCharacter = _paddingCharacter;\n    }\n    Coder.prototype.encodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 8 + 5) / 6 | 0;\n        }\n        return (length + 2) / 3 * 4 | 0;\n    };\n    Coder.prototype.encode = function (data) {\n        var out = \"\";\n        var i = 0;\n        for (; i < data.length - 2; i += 3) {\n            var c = (data[i] << 16) | (data[i + 1] << 8) | (data[i + 2]);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            out += this._encodeByte((c >>> 1 * 6) & 63);\n            out += this._encodeByte((c >>> 0 * 6) & 63);\n        }\n        var left = data.length - i;\n        if (left > 0) {\n            var c = (data[i] << 16) | (left === 2 ? data[i + 1] << 8 : 0);\n            out += this._encodeByte((c >>> 3 * 6) & 63);\n            out += this._encodeByte((c >>> 2 * 6) & 63);\n            if (left === 2) {\n                out += this._encodeByte((c >>> 1 * 6) & 63);\n            }\n            else {\n                out += this._paddingCharacter || \"\";\n            }\n            out += this._paddingCharacter || \"\";\n        }\n        return out;\n    };\n    Coder.prototype.maxDecodedLength = function (length) {\n        if (!this._paddingCharacter) {\n            return (length * 6 + 7) / 8 | 0;\n        }\n        return length / 4 * 3 | 0;\n    };\n    Coder.prototype.decodedLength = function (s) {\n        return this.maxDecodedLength(s.length - this._getPaddingLength(s));\n    };\n    Coder.prototype.decode = function (s) {\n        if (s.length === 0) {\n            return new Uint8Array(0);\n        }\n        var paddingLength = this._getPaddingLength(s);\n        var length = s.length - paddingLength;\n        var out = new Uint8Array(this.maxDecodedLength(length));\n        var op = 0;\n        var i = 0;\n        var haveBad = 0;\n        var v0 = 0, v1 = 0, v2 = 0, v3 = 0;\n        for (; i < length - 4; i += 4) {\n            v0 = this._decodeChar(s.charCodeAt(i + 0));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n            haveBad |= v2 & INVALID_BYTE;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (i < length - 1) {\n            v0 = this._decodeChar(s.charCodeAt(i));\n            v1 = this._decodeChar(s.charCodeAt(i + 1));\n            out[op++] = (v0 << 2) | (v1 >>> 4);\n            haveBad |= v0 & INVALID_BYTE;\n            haveBad |= v1 & INVALID_BYTE;\n        }\n        if (i < length - 2) {\n            v2 = this._decodeChar(s.charCodeAt(i + 2));\n            out[op++] = (v1 << 4) | (v2 >>> 2);\n            haveBad |= v2 & INVALID_BYTE;\n        }\n        if (i < length - 3) {\n            v3 = this._decodeChar(s.charCodeAt(i + 3));\n            out[op++] = (v2 << 6) | v3;\n            haveBad |= v3 & INVALID_BYTE;\n        }\n        if (haveBad !== 0) {\n            throw new Error(\"Base64Coder: incorrect characters for decoding\");\n        }\n        return out;\n    };\n    // Standard encoding have the following encoded/decoded ranges,\n    // which we need to convert between.\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  +   /\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   43  47\n    //\n    // Encode 6 bits in b into a new character.\n    Coder.prototype._encodeByte = function (b) {\n        // Encoding uses constant time operations as follows:\n        //\n        // 1. Define comparison of A with B using (A - B) >>> 8:\n        //          if A > B, then result is positive integer\n        //          if A <= B, then result is 0\n        //\n        // 2. Define selection of C or 0 using bitwise AND: X & C:\n        //          if X == 0, then result is 0\n        //          if X != 0, then result is C\n        //\n        // 3. Start with the smallest comparison (b >= 0), which is always\n        //    true, so set the result to the starting ASCII value (65).\n        //\n        // 4. Continue comparing b to higher ASCII values, and selecting\n        //    zero if comparison isn't true, otherwise selecting a value\n        //    to add to result, which:\n        //\n        //          a) undoes the previous addition\n        //          b) provides new value to add\n        //\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 43);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 43) - 63 + 47);\n        return String.fromCharCode(result);\n    };\n    // Decode a character code into a byte.\n    // Must return 256 if character is out of alphabet range.\n    Coder.prototype._decodeChar = function (c) {\n        // Decoding works similar to encoding: using the same comparison\n        // function, but now it works on ranges: result is always incremented\n        // by value, but this value becomes zero if the range is not\n        // satisfied.\n        //\n        // Decoding starts with invalid value, 256, which is then\n        // subtracted when the range is satisfied. If none of the ranges\n        // apply, the function returns 256, which is then checked by\n        // the caller to throw error.\n        var result = INVALID_BYTE; // start with invalid character\n        // c == 43 (c > 42 and c < 44)\n        result += (((42 - c) & (c - 44)) >>> 8) & (-INVALID_BYTE + c - 43 + 62);\n        // c == 47 (c > 46 and c < 48)\n        result += (((46 - c) & (c - 48)) >>> 8) & (-INVALID_BYTE + c - 47 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    Coder.prototype._getPaddingLength = function (s) {\n        var paddingLength = 0;\n        if (this._paddingCharacter) {\n            for (var i = s.length - 1; i >= 0; i--) {\n                if (s[i] !== this._paddingCharacter) {\n                    break;\n                }\n                paddingLength++;\n            }\n            if (s.length < 4 || paddingLength > 2) {\n                throw new Error(\"Base64Coder: incorrect padding\");\n            }\n        }\n        return paddingLength;\n    };\n    return Coder;\n}());\nexports.Coder = Coder;\nvar stdCoder = new Coder();\nfunction encode(data) {\n    return stdCoder.encode(data);\n}\nexports.encode = encode;\nfunction decode(s) {\n    return stdCoder.decode(s);\n}\nexports.decode = decode;\n/**\n * Implements URL-safe Base64 encoding.\n * (Same as Base64, but '+' is replaced with '-', and '/' with '_').\n *\n * Operates in constant time.\n */\nvar URLSafeCoder = /** @class */ (function (_super) {\n    __extends(URLSafeCoder, _super);\n    function URLSafeCoder() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // URL-safe encoding have the following encoded/decoded ranges:\n    //\n    // ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz 0123456789  -   _\n    // Index:   0 - 25                    26 - 51              52 - 61   62  63\n    // ASCII:  65 - 90                    97 - 122             48 - 57   45  95\n    //\n    URLSafeCoder.prototype._encodeByte = function (b) {\n        var result = b;\n        // b >= 0\n        result += 65;\n        // b > 25\n        result += ((25 - b) >>> 8) & ((0 - 65) - 26 + 97);\n        // b > 51\n        result += ((51 - b) >>> 8) & ((26 - 97) - 52 + 48);\n        // b > 61\n        result += ((61 - b) >>> 8) & ((52 - 48) - 62 + 45);\n        // b > 62\n        result += ((62 - b) >>> 8) & ((62 - 45) - 63 + 95);\n        return String.fromCharCode(result);\n    };\n    URLSafeCoder.prototype._decodeChar = function (c) {\n        var result = INVALID_BYTE;\n        // c == 45 (c > 44 and c < 46)\n        result += (((44 - c) & (c - 46)) >>> 8) & (-INVALID_BYTE + c - 45 + 62);\n        // c == 95 (c > 94 and c < 96)\n        result += (((94 - c) & (c - 96)) >>> 8) & (-INVALID_BYTE + c - 95 + 63);\n        // c > 47 and c < 58\n        result += (((47 - c) & (c - 58)) >>> 8) & (-INVALID_BYTE + c - 48 + 52);\n        // c > 64 and c < 91\n        result += (((64 - c) & (c - 91)) >>> 8) & (-INVALID_BYTE + c - 65 + 0);\n        // c > 96 and c < 123\n        result += (((96 - c) & (c - 123)) >>> 8) & (-INVALID_BYTE + c - 97 + 26);\n        return result;\n    };\n    return URLSafeCoder;\n}(Coder));\nexports.URLSafeCoder = URLSafeCoder;\nvar urlSafeCoder = new URLSafeCoder();\nfunction encodeURLSafe(data) {\n    return urlSafeCoder.encode(data);\n}\nexports.encodeURLSafe = encodeURLSafe;\nfunction decodeURLSafe(s) {\n    return urlSafeCoder.decode(s);\n}\nexports.decodeURLSafe = decodeURLSafe;\nexports.encodedLength = function (length) {\n    return stdCoder.encodedLength(length);\n};\nexports.maxDecodedLength = function (length) {\n    return stdCoder.maxDecodedLength(length);\n};\nexports.decodedLength = function (s) {\n    return stdCoder.decodedLength(s);\n};\n//# sourceMappingURL=base64.js.map","import * as ArweaveUtils from './utils';\r\n\r\n// In TypeScript 3.7, could be written as a single type:\r\n// `type DeepHashChunk = Uint8Array | DeepHashChunk[];`\r\ntype DeepHashChunk = Uint8Array | DeepHashChunks;\r\ninterface DeepHashChunks extends Array<DeepHashChunk> {}\r\n\r\nexport default async function deepHash(data: DeepHashChunk): Promise<Uint8Array> {\r\n\tif (Array.isArray(data)) {\r\n\t\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\t\tArweaveUtils.stringToBuffer('list'),\r\n\t\t\tArweaveUtils.stringToBuffer(data.length.toString())\r\n\t\t]);\r\n\r\n\t\treturn await deepHashChunks(data, await crypto.subtle.digest('SHA-384', tag));\r\n\t}\r\n\r\n\tconst tag = ArweaveUtils.concatBuffers([\r\n\t\tArweaveUtils.stringToBuffer('blob'),\r\n\t\tArweaveUtils.stringToBuffer(data.byteLength.toString())\r\n\t]);\r\n\r\n\tconst taggedHash = ArweaveUtils.concatBuffers([\r\n\t\tawait crypto.subtle.digest('SHA-384', tag),\r\n\t\tawait crypto.subtle.digest('SHA-384', data)\r\n\t]);\r\n\r\n\treturn await crypto.subtle.digest('SHA-384', taggedHash);\r\n}\r\n\r\nasync function deepHashChunks(chunks: DeepHashChunks, acc: Uint8Array): Promise<Uint8Array> {\r\n\tif (chunks.length < 1) {\r\n\t\treturn acc;\r\n\t}\r\n\r\n\tconst hashPair = ArweaveUtils.concatBuffers([acc, await deepHash(chunks[0])]);\r\n\tconst newAcc = await crypto.subtle.digest('SHA-384', hashPair);\r\n\treturn await deepHashChunks(chunks.slice(1), newAcc);\r\n}\r\n","/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","// import * as B64 from 'base64-js';\r\nimport { encode as fromByteArray, decode as toByteArray } from '@stablelib/base64';\r\nimport deepHash from './deepHash';\r\n// import * as BigNumber from 'bignumber.js';\r\nimport BigNumber from 'bignumber.js';\r\n\r\nexport type Base64UrlString = string;\r\n\r\nexport function concatBuffers(buffers: Uint8Array[] | ArrayBuffer[]): Uint8Array {\r\n\tlet total_length = 0;\r\n\r\n\tfor (let i = 0; i < buffers.length; i++) {\r\n\t\ttotal_length += buffers[i].byteLength;\r\n\t}\r\n\r\n\tlet temp = new Uint8Array(total_length);\r\n\tlet offset = 0;\r\n\r\n\ttemp.set(new Uint8Array(buffers[0]), offset);\r\n\toffset += buffers[0].byteLength;\r\n\r\n\tfor (let i = 1; i < buffers.length; i++) {\r\n\t\ttemp.set(new Uint8Array(buffers[i]), offset);\r\n\t\toffset += buffers[i].byteLength;\r\n\t}\r\n\r\n\treturn temp;\r\n}\r\n\r\nexport function b64UrlToString(b64UrlString: string): string {\r\n\tlet buffer = b64UrlToBuffer(b64UrlString);\r\n\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function bufferToString(buffer: Uint8Array | ArrayBuffer): string {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextDecoder == 'undefined') {\r\n\t\tconst TextDecoder = require('util').TextDecoder;\r\n\t\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n\t}\r\n\r\n\treturn new TextDecoder('utf-8', { fatal: true }).decode(buffer);\r\n}\r\n\r\nexport function stringToBuffer(string: string): Uint8Array {\r\n\t// TextEncoder will be available in browsers, but not in node\r\n\tif (typeof TextEncoder == 'undefined') {\r\n\t\tconst TextEncoder = require('util').TextEncoder;\r\n\t\treturn new TextEncoder().encode(string);\r\n\t}\r\n\treturn new TextEncoder().encode(string);\r\n}\r\n\r\nexport function stringToB64Url(string: string): string {\r\n\treturn bufferTob64Url(stringToBuffer(string));\r\n}\r\n\r\nexport function b64UrlToBuffer(b64UrlString: string): Uint8Array {\r\n\treturn new Uint8Array(toByteArray(b64UrlDecode(b64UrlString)));\r\n}\r\n\r\nexport function bufferTob64(buffer: Uint8Array): string {\r\n\treturn fromByteArray(new Uint8Array(buffer));\r\n}\r\n\r\nexport function bufferTob64Url(buffer: Uint8Array): string {\r\n\treturn b64UrlEncode(bufferTob64(buffer));\r\n}\r\n\r\nexport function b64UrlEncode(b64UrlString: string): string {\r\n\treturn b64UrlString.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '');\r\n}\r\n\r\nexport function b64UrlDecode(b64UrlString: string): string {\r\n\tb64UrlString = b64UrlString.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\tlet padding;\r\n\tb64UrlString.length % 4 == 0 ? (padding = 0) : (padding = 4 - (b64UrlString.length % 4));\r\n\treturn b64UrlString.concat('='.repeat(padding));\r\n}\r\n\r\nexport async function getSignatureData(tx): Promise<Uint8Array> {\r\n\t// Structured clone transfer strips all the fancy Function helpers\r\n\t// reconstruct Transaction Object to get them back\r\n\ttx = new Transaction(tx);\r\n\r\n\tswitch (tx.format) {\r\n\t\tcase 1:\r\n\t\t\tlet tags = tx.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\taccumulator,\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\t}, new Uint8Array());\r\n\r\n\t\t\treturn concatBuffers([\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\ttx.get('data', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttags\r\n\t\t\t]);\r\n\t\tcase 2:\r\n\t\t\tif (!tx.data_root) {\r\n\t\t\t\tawait tx.prepareChunks(tx.data);\r\n\t\t\t}\r\n\r\n\t\t\tconst tagList: [Uint8Array, Uint8Array][] = tx.tags.map((tag) => [\r\n\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t]);\r\n\r\n\t\t\treturn await deepHash([\r\n\t\t\t\tstringToBuffer(tx.format.toString()),\r\n\t\t\t\ttx.get('owner', { decode: true, string: false }),\r\n\t\t\t\ttx.get('target', { decode: true, string: false }),\r\n\t\t\t\tstringToBuffer(tx.quantity),\r\n\t\t\t\tstringToBuffer(tx.reward),\r\n\t\t\t\ttx.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\ttagList,\r\n\t\t\t\tstringToBuffer(tx.data_size),\r\n\t\t\t\ttx.get('data_root', { decode: true, string: false })\r\n\t\t\t]);\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unexpected transaction format: ${tx.format}`);\r\n\t}\r\n}\r\n\r\nexport function setSignature(\r\n\ttx,\r\n\t{\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}\r\n) {\r\n\ttx.id = id;\r\n\ttx.owner = owner;\r\n\tif (reward) tx.reward = reward;\r\n\tif (tags) tx.tags = tags;\r\n\ttx.signature = signature;\r\n\treturn tx;\r\n}\r\n\r\n// from Arweave TX\r\n// https://github.com/ArweaveTeam/arweave-js/blob/8df379bfd2744fa3525fca8dee1f9d74f352bec6/src/common/lib/transaction.ts#L53\r\nclass BaseObject {\r\n\t[key: string]: any;\r\n\r\n\tpublic get(field: string): string;\r\n\tpublic get(field: string, options: { decode: true; string: false }): Uint8Array;\r\n\tpublic get(field: string, options: { decode: true; string: true }): string;\r\n\r\n\tpublic get(\r\n\t\tfield: string,\r\n\t\toptions?: {\r\n\t\t\tstring?: boolean;\r\n\t\t\tdecode?: boolean;\r\n\t\t}\r\n\t): string | Uint8Array | Tag[] {\r\n\t\tif (!Object.getOwnPropertyNames(this).includes(field)) {\r\n\t\t\tthrow new Error(`Field \"${field}\" is not a property of the Arweave Transaction class.`);\r\n\t\t}\r\n\r\n\t\t// Handle fields that are Uint8Arrays.\r\n\t\t// To maintain compat we encode them to b64url\r\n\t\t// if decode option is not specificed.\r\n\t\tif (this[field] instanceof Uint8Array) {\r\n\t\t\tif (options && options.decode && options.string) {\r\n\t\t\t\treturn bufferToString(this[field]);\r\n\t\t\t}\r\n\t\t\tif (options && options.decode && !options.string) {\r\n\t\t\t\treturn this[field];\r\n\t\t\t}\r\n\t\t\treturn bufferTob64Url(this[field]);\r\n\t\t}\r\n\r\n\t\tif (options && options.decode == true) {\r\n\t\t\tif (options && options.string) {\r\n\t\t\t\treturn b64UrlToString(this[field]);\r\n\t\t\t}\r\n\r\n\t\t\treturn b64UrlToBuffer(this[field]);\r\n\t\t}\r\n\r\n\t\treturn this[field];\r\n\t}\r\n}\r\n\r\nexport class Tag extends BaseObject {\r\n\treadonly name: string;\r\n\treadonly value: string;\r\n\r\n\tpublic constructor(name: string, value: string, decode = false) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\n\r\nexport interface TransactionInterface {\r\n\tformat: number;\r\n\tid: string;\r\n\tlast_tx: string;\r\n\towner: string;\r\n\ttags: Tag[];\r\n\ttarget: string;\r\n\tquantity: string;\r\n\tdata: Uint8Array;\r\n\treward: string;\r\n\tsignature: string;\r\n\tdata_size: string;\r\n\tdata_root: string;\r\n}\r\nexport default {};\r\nexport class Transaction extends BaseObject implements TransactionInterface {\r\n\tpublic readonly format: number = 2;\r\n\tpublic id: string = '';\r\n\tpublic readonly last_tx: string = '';\r\n\tpublic owner: string = '';\r\n\tpublic tags: Tag[] = [];\r\n\tpublic readonly target: string = '';\r\n\tpublic readonly quantity: string = '0';\r\n\tpublic readonly data_size: string = '0';\r\n\tpublic data: Uint8Array = new Uint8Array();\r\n\tpublic data_root: string = '';\r\n\tpublic reward: string = '0';\r\n\tpublic signature: string = '';\r\n\r\n\t// Computed when needed.\r\n\tpublic chunks?: {\r\n\t\tdata_root: Uint8Array;\r\n\t\tchunks: Chunk[];\r\n\t\tproofs: Proof[];\r\n\t};\r\n\r\n\tpublic constructor(attributes: Partial<TransactionInterface> = {}) {\r\n\t\tsuper();\r\n\t\tObject.assign(this, attributes);\r\n\r\n\t\t// If something passes in a Tx that has been toJSON'ed and back,\r\n\t\t// or where the data was filled in from /tx/data endpoint.\r\n\t\t// data will be b64url encoded, so decode it.\r\n\t\tif (typeof this.data === 'string') {\r\n\t\t\tthis.data = b64UrlToBuffer(this.data as string);\r\n\t\t}\r\n\r\n\t\tif (attributes.tags) {\r\n\t\t\tthis.tags = attributes.tags.map((tag: { name: string; value: string }) => {\r\n\t\t\t\treturn new Tag(tag.name, tag.value);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic addTag(name: string, value: string) {\r\n\t\tthis.tags.push(new Tag(stringToB64Url(name), stringToB64Url(value)));\r\n\t}\r\n\r\n\tpublic toJSON() {\r\n\t\treturn {\r\n\t\t\tformat: this.format,\r\n\t\t\tid: this.id,\r\n\t\t\tlast_tx: this.last_tx,\r\n\t\t\towner: this.owner,\r\n\t\t\ttags: this.tags,\r\n\t\t\ttarget: this.target,\r\n\t\t\tquantity: this.quantity,\r\n\t\t\tdata: bufferTob64Url(this.data),\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_tree: this.data_tree,\r\n\t\t\treward: this.reward,\r\n\t\t\tsignature: this.signature\r\n\t\t};\r\n\t}\r\n\r\n\tpublic setOwner(owner: string) {\r\n\t\tthis.owner = owner;\r\n\t}\r\n\r\n\tpublic setSignature({\r\n\t\tid,\r\n\t\towner,\r\n\t\treward,\r\n\t\ttags,\r\n\t\tsignature\r\n\t}: {\r\n\t\tid: string;\r\n\t\towner: string;\r\n\t\treward?: string;\r\n\t\ttags?: Tag[];\r\n\t\tsignature: string;\r\n\t}) {\r\n\t\tthis.id = id;\r\n\t\tthis.owner = owner;\r\n\t\tif (reward) this.reward = reward;\r\n\t\tif (tags) this.tags = tags;\r\n\t\tthis.signature = signature;\r\n\t}\r\n\r\n\tpublic async prepareChunks(data: Uint8Array) {\r\n\t\t// Note: we *do not* use `this.data`, the caller may be\r\n\t\t// operating on a transaction with an zero length data field.\r\n\t\t// This function computes the chunks for the data passed in and\r\n\t\t// assigns the result to this transaction. It should not read the\r\n\t\t// data *from* this transaction.\r\n\r\n\t\tif (!this.chunks && data.byteLength > 0) {\r\n\t\t\tthis.chunks = await generateTransactionChunks(data);\r\n\t\t\tthis.data_root = bufferTob64Url(this.chunks.data_root);\r\n\t\t}\r\n\r\n\t\tif (!this.chunks && data.byteLength === 0) {\r\n\t\t\tthis.chunks = {\r\n\t\t\t\tchunks: [],\r\n\t\t\t\tdata_root: new Uint8Array(),\r\n\t\t\t\tproofs: []\r\n\t\t\t};\r\n\t\t\tthis.data_root = '';\r\n\t\t}\r\n\t}\r\n\r\n\t// Returns a chunk in a format suitable for posting to /chunk.\r\n\t// Similar to `prepareChunks()` this does not operate `this.data`,\r\n\t// instead using the data passed in.\r\n\tpublic getChunk(idx: number, data: Uint8Array) {\r\n\t\tif (!this.chunks) {\r\n\t\t\tthrow new Error(`Chunks have not been prepared`);\r\n\t\t}\r\n\t\tconst proof = this.chunks.proofs[idx];\r\n\t\tconst chunk = this.chunks.chunks[idx];\r\n\t\treturn {\r\n\t\t\tdata_root: this.data_root,\r\n\t\t\tdata_size: this.data_size,\r\n\t\t\tdata_path: bufferTob64Url(proof.proof),\r\n\t\t\toffset: proof.offset.toString(),\r\n\t\t\tchunk: bufferTob64Url(data.slice(chunk.minByteRange, chunk.maxByteRange))\r\n\t\t};\r\n\t}\r\n\r\n\tpublic async getSignatureData(): Promise<Uint8Array> {\r\n\t\tswitch (this.format) {\r\n\t\t\tcase 1:\r\n\t\t\t\tlet tags = this.tags.reduce((accumulator: Uint8Array, tag: Tag) => {\r\n\t\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\t\taccumulator,\r\n\t\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t\t]);\r\n\t\t\t\t}, new Uint8Array());\r\n\r\n\t\t\t\treturn concatBuffers([\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('data', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttags\r\n\t\t\t\t]);\r\n\t\t\tcase 2:\r\n\t\t\t\tif (!this.data_root) {\r\n\t\t\t\t\tawait this.prepareChunks(this.data);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst tagList: [Uint8Array, Uint8Array][] = this.tags.map((tag) => [\r\n\t\t\t\t\ttag.get('name', { decode: true, string: false }),\r\n\t\t\t\t\ttag.get('value', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\r\n\t\t\t\treturn await deepHash([\r\n\t\t\t\t\tstringToBuffer(this.format.toString()),\r\n\t\t\t\t\tthis.get('owner', { decode: true, string: false }),\r\n\t\t\t\t\tthis.get('target', { decode: true, string: false }),\r\n\t\t\t\t\tstringToBuffer(this.quantity),\r\n\t\t\t\t\tstringToBuffer(this.reward),\r\n\t\t\t\t\tthis.get('last_tx', { decode: true, string: false }),\r\n\t\t\t\t\ttagList,\r\n\t\t\t\t\tstringToBuffer(this.data_size),\r\n\t\t\t\t\tthis.get('data_root', { decode: true, string: false })\r\n\t\t\t\t]);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unexpected transaction format: ${this.format}`);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function winstonToAr(\r\n\twinstonString: string,\r\n\t{ formatted = false, decimals = 12, trim = true } = {}\r\n) {\r\n\tlet number = stringToBigNum(winstonString, decimals).shiftedBy(-12);\r\n\r\n\treturn formatted ? number.toFormat(decimals) : number.toFixed(decimals);\r\n}\r\n\r\nexport function arToWinston(arString: string, { formatted = false } = {}) {\r\n\tlet number = stringToBigNum(arString).shiftedBy(12);\r\n\r\n\treturn formatted ? number.toFormat() : number.toFixed(0);\r\n}\r\n\r\nfunction stringToBigNum(stringValue: string, decimalPlaces: number = 12): BigNumber {\r\n\treturn BigNum(stringValue, decimalPlaces);\r\n}\r\n\r\nconst BigNum = (value: string, decimals: number): BigNumber => {\r\n\t// because of the way Vite builds libraries that have both commonjs and es modules :/\r\n\tlet instance;\r\n\ttry {\r\n\t\tinstance = BigNumber.clone({ DECIMAL_PLACES: decimals });\r\n\t} catch (error) {\r\n\t\tconsole.warn('Caught big num issues, try default', error);\r\n\t\tinstance = BigNumber.default.clone({ DECIMAL_PLACES: decimals });\r\n\t}\r\n\treturn new instance(value);\r\n};\r\n","<script>\r\n\timport * as ArweaveUtils from './arweave/utils';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tlet defConf;\r\n\tlet checksOut = false;\r\n\tconsole.log('Signing ', { params: props.params });\r\n\r\n\tconst transaction = props.params;\r\n\r\n\tlet tx = new ArweaveUtils.Transaction(transaction);\r\n\tlet tags = tx.tags.map((tag) => ({\r\n\t\tname: tag.get('name', { decode: true, string: true }),\r\n\t\tval: tag.get('value', { decode: true, string: true })\r\n\t}));\r\n</script>\r\n\r\n<!-- \r\n{props} passes the properties down to <DefaultConfirmation>\r\nlet:props={p} gets them back up from the <DefaultConfirmation> slot \r\n-->\r\n{#if transaction}\r\n\t<div class=\"attention\">\r\n\t\t<!-- this is default content, override with slot -->\r\n\t\t<div>\r\n\t\t\t⚠️ Attention! You are about to sign ({props.method}) this Arweave transaction. Authorize to\r\n\t\t\tproceed?\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\tTags:<br />\r\n\t\t\t{#each tags as { name, val }}\r\n\t\t\t\t<li class={name.includes('App-Name') ? 'bold' : ''}>\r\n\t\t\t\t\t{name}:\r\n\t\t\t\t\t{val}\r\n\t\t\t\t</li>\r\n\t\t\t{/each}\r\n\t\t\tToken transfer: {transaction.quantity}<br />\r\n\t\t\tGas fees: {transaction.reward} (~${(\r\n\t\t\t\tArweaveUtils.winstonToAr(transaction.reward) * 100\r\n\t\t\t).toFixed(5)})<br />\r\n\t\t</div>\r\n\t\t<div class=\"submit\">\r\n\t\t\t<button class=\"green\" on:click|preventDefault={handleConfirmed}>Yes</button>\r\n\t\t\t<button class=\"yellow\" on:click|preventDefault={handleDenied}>Cancel</button>\r\n\t\t</div>\r\n\t</div>\r\n{/if}\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n\tbutton:disabled {\r\n\t\tbackground-color: grey !important;\r\n\t}\r\n\t.bold {\r\n\t\tfont-weight: bolder;\r\n\t}\r\n\tli {\r\n\t\toverflow-wrap: break-word;\r\n\t\tword-break: break-all;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport DefaultConfirmation from './DefaultConfirmation.svelte';\r\n\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n\tconsole.log({ props });\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"attention\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div>\r\n\t\t<!-- JSON.stringify(, null, 2)   decoder.decode()-->\r\n\t\t<!-- {props.params.toString()}  -->\r\n\t\t<!-- TODO: Data layouts for confirmer  -->\r\n\t\t⚠️ Sign this transaction?\r\n\t</div>\r\n\t<div class=\"submit\">\r\n\t\t<button class=\"green\" on:click|preventDefault={handleConfirmed}>Yes</button>\r\n\t\t<button class=\"yellow\" on:click|preventDefault={handleDenied}>No</button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t\twidth: 100%;\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","<script>\r\n\texport let props;\r\n\texport let handleConfirmed;\r\n\texport let handleDenied;\r\n\r\n\tconst decoder = new TextDecoder();\r\n\r\n\tlet defConf;\r\n</script>\r\n\r\n<!-- on:confirmed on:denied -- they just forward the event notification up to <Confirmer /> -->\r\n<!-- https://svelte.dev/tutorial/event-forwarding -->\r\n<div class=\"attention\">\r\n\t<!-- this is default content, override with slot -->\r\n\t<div>\r\n\t\t⚠️ Decrypt {decoder.decode(props.params.tag)}?\r\n\t</div>\r\n\t<div class=\"submit\">\r\n\t\t<button class=\"green\" on:click|preventDefault={handleConfirmed}>Yes</button>\r\n\t\t<button class=\"yellow\" on:click|preventDefault={handleDenied}>No</button>\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\tdiv.attention {\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tbackground-color: #fff9c4;\r\n\t\tfilter: drop-shadow(2px 4px 6px rgba(0, 0, 0, 0.3));\r\n\t\twidth: 100%;\r\n\t}\r\n\tdiv {\r\n\t\tpadding: 0.3em;\r\n\t\tmargin: 0.3em;\r\n\t}\r\n</style>\r\n","import { handlers } from '@peerpiper/iframe-wallet-engine';\r\nimport DefaultConfirmation from './DefaultConfirmation.svelte';\r\nimport Connect from './Connect.svelte';\r\nimport ArweaveSign from './ArweaveSign.svelte';\r\nimport Sign from './Sign.svelte';\r\nimport Decrypt from './Decrypt.svelte';\r\n\r\nlet confirmationComponents = {\r\n\tDefault: { component: DefaultConfirmation }\r\n};\r\n\r\n// setup boring defaults, can be overriden with fanicer by users\r\nfor (const [key, value] of Object.entries(handlers)) {\r\n\tconfirmationComponents[key] = { component: DefaultConfirmation };\r\n}\r\n\r\n// Customize certain confirmation components\r\nlet customizedComponents = {\r\n\tconnect: { component: Connect },\r\n\ted25519: {\r\n\t\tsign: {\r\n\t\t\tcomponent: Sign\r\n\t\t}\r\n\t},\r\n\tarweaveWalletAPI: {\r\n\t\tsign: {\r\n\t\t\tcomponent: ArweaveSign\r\n\t\t}\r\n\t},\r\n\tproxcryptor: {\r\n\t\tselfDecrypt: {\r\n\t\t\tcomponent: Decrypt\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconfirmationComponents = { ...confirmationComponents, ...customizedComponents };\r\n\r\nexport { confirmationComponents };\r\n","<script>\r\n\timport { confirmationComponents } from '$lib/components/confirm/index';\r\n\timport { handlers } from '@peerpiper/iframe-wallet-engine';\r\n\r\n\texport let show;\r\n\texport let hide;\r\n\r\n\tconst leaf = (obj, path) => path.split('.').reduce((value, el) => value && value[el], obj);\r\n\r\n\tlet requests = [];\r\n\r\n\t// set confirm fn\r\n\t// calling confirm adds a confirmation request to the list of outstanding request\r\n\t// resolving the Promise removes the request\r\n\t// if last request, hide() the UI\r\n\tconst confirm = async (confirmSection, params) => {\r\n\t\tconst component = confirmSection\r\n\t\t\t? leaf(confirmationComponents, confirmSection) || confirmationComponents.Default\r\n\t\t\t: false;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst handleConfirmed = () => {\r\n\t\t\t\tcommon();\r\n\t\t\t\tresolve(true); // signal handler to continue with action\r\n\t\t\t};\r\n\t\t\tconst handleDenied = () => {\r\n\t\t\t\tcommon();\r\n\t\t\t\tresolve(false); // signal handler to continue with action\r\n\t\t\t};\r\n\r\n\t\t\tconst thisRequest = { component, confirmSection, params, handleConfirmed, handleDenied };\r\n\r\n\t\t\tfunction common() {\r\n\t\t\t\trequests = requests.filter((req) => req !== thisRequest); // find and remove element\r\n\t\t\t\tif (requests.length == 0) hide(); // hide if last one removed\r\n\t\t\t}\r\n\r\n\t\t\trequests = [...requests, thisRequest];\r\n\t\t\tshow(); // trigger the UI to show this request\r\n\t\t});\r\n\t};\r\n\r\n\t// pass the above confirm function to the handlers so they can use it when their methods are called\r\n\thandlers.setConfig('confirm', confirm);\r\n</script>\r\n\r\n{#if requests}\r\n\t{#each requests as { component, confirmSection, params, handleConfirmed, handleDenied }}\r\n\t\t<div class=\"active\">\r\n\t\t\t<svelte:component\r\n\t\t\t\tthis={component.component}\r\n\t\t\t\tprops={{ method: confirmSection, params }}\r\n\t\t\t\t{handleConfirmed}\r\n\t\t\t\t{handleDenied}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t{/each}\r\n{/if}\r\n\r\n<style>\r\n\t.active {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tmin-width: 350px;\r\n\t\tmin-height: 50px;\r\n\t\tflex-direction: column;\r\n\t}\r\n</style>\r\n","<script>\r\n\timport { onMount, setContext } from 'svelte';\r\n\timport Connector from '$lib/Connector.svelte';\r\n\timport GetKeys from '$lib/GetKeys.svelte';\r\n\timport { storedValue } from '$lib/stores';\r\n\timport AutoSizer from '$lib/AutoSizer.svelte';\r\n\timport Opened from '$lib/Opened.svelte';\r\n\timport Confirmer from '$lib/Confirmer.svelte';\r\n\r\n\timport Manager from '$lib/Manager.svelte';\r\n\r\n\tconst STORED_VALUE = 'STORED_VALUE';\r\n\tconst def = null;\r\n\r\n\t// browser functions (set in onMount to ensure browser loaded)\r\n\tlet ImmortalDB, save, mounted;\r\n\r\n\tlet syncing;\r\n\r\n\tonMount(async () => {\r\n\t\t({ ImmortalDB } = await import('immortal-db'));\r\n\t\tconst storedString = await ImmortalDB.get(STORED_VALUE, def);\r\n\t\t$storedValue = JSON.parse(storedString);\r\n\r\n\t\tsave = () => {\r\n\t\t\tImmortalDB.set(STORED_VALUE, JSON.stringify($storedValue)); // auto save when $storedValue changes\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tsyncing = window.opener && window.opener?.origin === window.location.origin;\r\n\t\t} catch (error) {\r\n\t\t\t// not syncing by same origin, that's ok it was probably a regular link from somewhere\r\n\t\t}\r\n\t\tmounted = true;\r\n\t});\r\n\r\n\t$: if (ImmortalDB && $storedValue && save) save();\r\n\r\n\tfunction loadedKeys() {\r\n\t\tsave();\r\n\t}\r\n</script>\r\n\r\n<!-- Based on whether this is the Window.Top (not an iframe) or a Child (iframe) depends on which to show: -->\r\n{#if window == window.top}\r\n\t<!-- NOT an iframe  -->\r\n\t<div class=\"top-wrapper\">\r\n\t\t{#if mounted && syncing}\r\n\t\t\t<!-- Opened handles on:loadedKeys by ALSO syncing them with the opener window -->\r\n\t\t\t<Opened let:syncKeys>\r\n\t\t\t\t<Manager>\r\n\t\t\t\t\t{#if syncKeys}\r\n\t\t\t\t\t\t<GetKeys on:loadedKeys on:loadedKeys={syncKeys} />\r\n\t\t\t\t\t{/if}\r\n\t\t\t\t</Manager>\r\n\t\t\t</Opened>\r\n\t\t{:else}\r\n\t\t\t<!-- Manager handles on:loadedKeys ONLY by saving them to storage -->\r\n\t\t\t<Manager>\r\n\t\t\t\t<GetKeys on:loadedKeys />\r\n\t\t\t</Manager>\r\n\t\t{/if}\r\n\t</div>\r\n{:else}\r\n\t<!-- Auto-resize embedded iframe -->\r\n\t<AutoSizer let:walletReady let:show let:hide>\r\n\t\t<!-- walletReady gets passed from AutoSizer to GetKeys -->\r\n\t\t<Connector {mounted}>\r\n\t\t\t<Confirmer {show} {hide} />\r\n\t\t\t<Manager>\r\n\t\t\t\t{#if walletReady}\r\n\t\t\t\t\t<GetKeys on:loadedKeys={walletReady} />\r\n\t\t\t\t{/if}\r\n\t\t\t</Manager>\r\n\t\t</Connector>\r\n\t</AutoSizer>\r\n{/if}\r\n\r\n<!-- Note: Don't style outside of the AutoSizer, or else the sizes in the ifram will be all messed up -->\r\n<style>\r\n\t.top-wrapper {\r\n\t\tmargin: 1.618em;\r\n\t\tpadding: 1.618em;\r\n\t}\r\n</style>\r\n"],"names":["create_if_block","internals","this","ArweaveUtils.concatBuffers","ArweaveUtils.stringToBuffer","toByteArray","fromByteArray","ArweaveUtils.winstonToAr","ArweaveUtils.Transaction"],"mappings":"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"}